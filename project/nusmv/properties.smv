-- For each of the tracks T3A and T3B there is at least one test case
-- in which the track is occupied at least once.

CTLSPEC EF T3A_occupied
CTLSPEC EF T3B_occupied


-- For each property, provide a classification of the property as safety, liveness, or other.
-- The set of properties that you should specify is as follows:

-- The signals show either green or red.
SPEC AG(
(S1A_red xor S1A_green) &
(S2A_red xor S2A_green) &
(S3A_red xor S3A_green) &
(S4A_red xor S4A_green) &
(S1B_red xor S1B_green) &
(S2B_red xor S2B_green) &
(S3B_red xor S3B_green) &
(S4B_red xor S4B_green)
)

-- The signals show red if passing the signal is unsafe due to occupied tracks or unlocked points.
SPEC AG(
  (
    T2A_occupied | (P1A_locked_straight & !P2B_locked_straight) | (!P1A_locked_straight & P2B_locked_straight) | (P1A_locked_curved & !P2B_locked_curved) | (!P1A_locked_curved & P2B_locked_curved)
  ) -> S2A_red
)

SPEC AG(
  (
    T2B_occupied | (P1B_locked_straight & !P2A_locked_straight) | (!P1B_locked_straight & P2A_locked_straight) | (P1B_locked_curved & !P2A_locked_curved) | (!P1B_locked_curved & P2A_locked_curved)
  ) -> S2B_red
)

-- The signals show red if passing the signal is unsafe due to occupied tracks or unlocked points.
SPEC AG(
  (
    T2A_occupied | (P1A_locked_straight & !P2B_locked_straight) | (!P1A_locked_straight & P2B_locked_straight) | (P1A_locked_curved & !P2B_locked_curved) | (!P1A_locked_curved & P2B_locked_curved)
  ) -> S3A_red
)

SPEC AG(
  (
    T2B_occupied | (P1B_locked_straight & !P2A_locked_straight) | (!P1B_locked_straight & P2A_locked_straight) | (P1B_locked_curved & !P2A_locked_curved) | (!P1B_locked_curved & P2A_locked_curved)
  ) -> S3B_red
)

-- The signals show red if passing the signal is unsafe due to occupied tracks or unlocked points.
SPEC AG(
  (
    T4A_occupied | (P2A_locked_straight & !P1B_locked_straight) | (!P2A_locked_straight & P1B_locked_straight) | (P2A_locked_curved & !P1B_locked_curved) | (!P2A_locked_curved & P1B_locked_curved)
  ) -> S4A_red
)

SPEC AG(
  (
    T4B_occupied | (P2B_locked_straight & !P1A_locked_straight) | (!P2B_locked_straight & P1A_locked_straight) | (P2B_locked_curved & !P1A_locked_curved) | (!P2B_locked_curved & P1A_locked_curved)
  ) -> S4B_red
)

-- When a train waits in front of a signal, the signal is not stuck on red forever.
SPEC AG(T1A_occupied -> AF(!S1A_red | !S2A_red))
SPEC AG(T3A_occupied -> AF(!S3A_red | !S4A_red))
SPEC AG(T1B_occupied -> AF(!S1B_red | !S2B_red))
SPEC AG(T3B_occupied -> AF(!S4B_red | !S3B_red))

-- The system never issues conflicting commands.
SPEC AG !(P1A_goal_straight & P1A_goal_curved)
SPEC AG !(P2A_goal_straight & P2A_goal_curved)
SPEC AG !(P1B_goal_straight & P1B_goal_curved)
SPEC AG !(P2B_goal_straight & P2B_goal_curved)

-- The points always follow the given commands.
SPEC AG(P1A_goal_straight -> A[P1A_locked_curved U A[!P1A_locked_curved U P1A_locked_straight]])
SPEC AG(P1A_goal_curved -> A[P1A_locked_straight U A[!P1A_locked_straight U P1A_locked_curved]])

SPEC AG(P1B_goal_straight -> A[P1B_locked_curved U A[!P1B_locked_curved U P1B_locked_straight]])
SPEC AG(P1B_goal_curved -> A[P1B_locked_straight U A[!P1B_locked_straight U P1B_locked_curved]])

SPEC AG(P2A_goal_straight -> A[P2A_locked_curved U A[!P2A_locked_curved U P2A_locked_straight]])
SPEC AG(P2A_goal_curved -> A[P2A_locked_straight U A[!P2A_locked_straight U P2A_locked_curved]])

SPEC AG(P2B_goal_straight -> A[P2B_locked_curved U A[!P2B_locked_curved U P2B_locked_straight]])
SPEC AG(P2B_goal_curved -> A[P2B_locked_straight U A[!P2B_locked_straight U P2B_locked_curved]])

-- Trains always make progress.
-- Along all paths it holds globally, if t1a is occupied then it holds on all paths eventually that t1a is unoccupied
SPEC AG(T1A_occupied -> AF(!T1A_occupied))
SPEC AG(T2A_occupied -> AF(!T2A_occupied))
SPEC AG(T3A_occupied -> AF(!T3A_occupied))
SPEC AG(T4A_occupied -> AF(!T4A_occupied))
SPEC AG(T1B_occupied -> AF(!T1B_occupied))
SPEC AG(T2B_occupied -> AF(!T2B_occupied))
SPEC AG(T3B_occupied -> AF(!T3B_occupied))
SPEC AG(T4B_occupied -> AF(!T4B_occupied))

-- It is always possible to reach a situation in which track T3A is occupied.
SPEC AG EF T3A_occupied

-- There is a trace in which trains pass each other in the middle.
--SPEC EF (
--( T1A_occupied -> AX ( !T1A_occupied & !T2A_occupied ) ) &
--( T1B_occupied -> AX ( !T1B_occupied & !T2B_occupied ) )
--)
--
--SPEC AG !(
--  ( T1A_occupied -> AX ( !T1A_occupied & !T2A_occupied ) ) &
--  ( T1B_occupied -> AX ( !T1B_occupied & !T2B_occupied ) )
--)
--

-- Trains never drive over an unlocked point
-- The signals show red if passing the signal is unsafe due to occupied tracks or unlocked points.


SPEC AG (
  ((T1A_occupied & S2A_green) -> (P1A_locked_curved | P1A_locked_straight)) &
  ((T1B_occupied & S2B_green) -> (P1B_locked_curved | P1B_locked_straight)) &

  ((T3A_occupied & S3A_green) -> (P1A_locked_curved | P1A_locked_straight)) &
  ((T3B_occupied & S3B_green) -> (P1B_locked_curved | P1B_locked_straight)) &

  ((T3A_occupied & S4A_green) -> (P2A_locked_curved | P2A_locked_straight)) &
  ((T3B_occupied & S4B_green) -> (P2B_locked_curved | P2B_locked_straight)) &

  ((T4A_occupied & S4A_green) -> (P2A_locked_curved | P2A_locked_straight)) &
  ((T4B_occupied & S4B_green) -> (P2B_locked_curved | P2B_locked_straight))
)


-- There is a trace where the trains never switch tracks
SPEC EG ( !P1A_locked_curved & !P1B_locked_curved & !P2A_locked_curved & !P2B_locked_curved )

-- Lights cannot be green and red simultaneaously
SPEC AG !(S1A_green & S1A_red)
SPEC AG !(S2A_green & S2A_red)
SPEC AG !(S3A_green & S3A_red)
SPEC AG !(S4A_green & S4A_red)
SPEC AG !(S1B_green & S1B_red)
SPEC AG !(S2B_green & S2B_red)
SPEC AG !(S3B_green & S3B_red)
SPEC AG !(S4B_green & S4B_red)
